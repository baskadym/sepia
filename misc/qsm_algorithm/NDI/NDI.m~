%% chi = NDI(localField,mask,voxelSize,varargin)
%
% Usage: chi = NDI(localField,mask,voxelSize,'b0dir',B0_dir,'weight',weight,...
%                   'iteration',200,'stepsize',1,'tolerance',0.5);
%
% Input
% --------------
% localField    : local (tissue) field
% mask          : signal mask
% voxelSize     : spatial resolution (in mm)
% flag/value pairs:
% -----------------
% 'tolerance'      : tolerance RMSE
% 'iteration'      : maximum number of iterations
% 'stepsize'       : step size of gradient descent
% 'weight'         : weighting mask
% 'b0dir'          : direction of main field 
%
% Output
% --------------
%
% Description: Nonlinear Dipole inversion (NDI) 
%
% Modified based on script_ndi.m in https://github.com/polakd/NDI_Toolbox
%
% Referece: D Polak, I Chatnuntawech, J Yoon, S Srinivasan Iyer, J Lee, 
% K Setsompop, and B Bilgic. 
% VaNDI: Variational Nonlinear Dipole Inversion enables QSM without free 
% parameters (program number 0319). 
% Proceedings of the International Society for Magnetic Resonance in 
% Medicine 2019, Montreal Canada.
%
% Kwok-shing Chan @ DCCN
% k.chan@donders.ru.nl
% Date created: 5 June 2019
% Date modified:
%
%
function chi = NDI(localField,mask,voxelSize,varargin)

% get matrix
matrixSize = size(mask);

% check optional input and set default
[tolerance,stepSize,iteration,weight,b0dir] = parse_varargin_NDI(varargin);

if isempty(weight)
    weight = mask;
end

dipoleKernel = DipoleKernel(matrixSize,voxelSize,b0dir);


chi = zeros(matrixSize, 'like',localField);
grad_prev = zeros(matrixSize, 'like',localField);

% case of one B0 direction
tic
for t = 1:iteration
    temp = weight .* sin(ifftn(dipoleKernel .* fftn(chi)) - localField);

    grad_f = 2 * sum(ifftn(dipoleKernel .* fftn(temp)), 4);

    chi = chi - stepSize * real(grad_f);

    update_grad = rmse(grad_prev(mask==1), grad_f(mask==1));

    disp(['iter: ', num2str(t), '   grad update:', num2str(update_grad)])

    if update_grad < tolerance
        break
    end

    grad_prev = grad_f;
end
toc

chi = chi .* mask;


end